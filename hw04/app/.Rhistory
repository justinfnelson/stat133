vec <- remove_missing(vec)
return(quantile(vec, .75, na.rm = TRUE, names = FALSE))
}
}
count_missing <- function(vec) {
count <- 0
for (i in vec) {
if (is.na(i) == TRUE) {
count <- count + 1
}
}
return(count)
}
summary_stats <- function(vec) {
list(minimum = get_minimum(vec),
percent10 = get_percentile10(vec),
quartile1 = get_quartile1(vec),
median = get_median(vec),
mean = get_average(vec),
quartile3 = get_quartile3(vec),
percent90 = get_percentile90(vec),
maximum = get_maximum(vec),
range = get_range(vec),
stdev = get_stdev(vec),
missing = count_missing(vec))
}
library('stringr')
a <- c(1,4,7,10, NA)
stats <- summary_stats(c(1,3))
stats
rbind(
(str_c(str_pad(names(stats)[1], side = c('right'), width = 10), ':', str_pad(format(stats[1], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[2], side = c('right'), width = 10), ':', str_pad(format(stats[2], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[3], side = c('right'), width = 10), ':', str_pad(format(stats[3], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[4], side = c('right'), width = 10), ':', str_pad(format(stats[4], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[5], side = c('right'), width = 10), ':', str_pad(format(stats[5], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[6], side = c('right'), width = 10), ':', str_pad(format(stats[6], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[7], side = c('right'), width = 10), ':', str_pad(format(stats[7], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[8], side = c('right'), width = 10), ':', str_pad(format(stats[8], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[9], side = c('right'), width = 10), ':', str_pad(format(stats[9], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[10], side = c('right'), width = 10), ':', str_pad(sprintf("%1.4f", stats[10]),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[11], side = c('right'), width = 10), ':', str_pad(format(stats[11], nsmall = 4),
side = c('left'), width = 8)))
)
rownames(NULL)
str_pad(names(stats)[1], side = c('left'), width = 10)
library('printr')
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (is.numeric(vec) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
remove_missing <- function(vec) {
#Removes all NA values in a vector.
vec <- vec[!is.na(vec)]
return(vec)
}
get_minimum <- function(vec, na.rm = NULL) {
#Returns the minimum of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(sort(vec)[1])
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(sort(vec)[1])
}
}
c <- c(1,3, NA)
get_maximum(c)
c <- c(1,3, 'test')
get_maximum(c)
get_range <- function(vec, na.rm = NULL) {
#Returns the range of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(get_maximum(vec) - get_minimum(vec))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(get_maximum(vec) - get_minimum(vec))
}
}
get_median <- function(vec, na.rm = NULL) {
#Returns the median of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
sorted <- sort(vec)
quantile(sorted, .5, names = FALSE)
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
sorted <- sort(vec)
quantile(sorted, .5, names = FALSE)
}
}
get_average <- function(vec, na.rm = NULL) {
#Returns the average of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
sum <- 0
length <- 0
for (num in vec) {
if (!is.na(num)){
sum <- sum + num
length <- length + 1
}
}
return(sum / length())
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
sum <- 0
for (num in vec) {
sum <- sum + num
}
return(sum / length(vec))
}
}
get_percentile10 <- function(vec, na.rm= NULL) {
#Returns the requested percentage of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(quantile(vec, .1, na.rm = TRUE, names = FALSE))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(quantile(vec, .1, na.rm = TRUE, names = FALSE))
}
}
get_percentile90 <- function(vec, na.rm= NULL) {
#Returns the requested percentage of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(quantile(vec, .9, na.rm = TRUE, names = FALSE))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(quantile(vec, .9, na.rm = TRUE, names = FALSE))
}
}
get_stdev <- function(vec, na.rm = NULL) {
#Returns the standard deviation of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
avg <- get_average(vec)
devs <- 0
for (num in vec) {
devs <- devs + (num - avg)**2
}
return(sqrt(((1 / (length(vec) - 1)) * devs)))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
avg <- get_average(vec)
devs <- 0
for (num in vec) {
devs <- devs + (num - avg)**2
}
return(sqrt(((1 / (length(vec) - 1)) * devs)))
}
}
get_quartile1 <- function(vec, na.rm = NULL) {
#Returns the first quartile of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(quantile(vec, .25, na.rm = TRUE, names = FALSE))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(quantile(vec, .25, na.rm = TRUE, names = FALSE))
}
}
get_quartile3 <- function(vec, na.rm = NULL) {
#Returns the third quartile of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
return(quantile(vec, .75, na.rm = TRUE, names = FALSE))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(quantile(vec, .75, na.rm = TRUE, names = FALSE))
}
}
count_missing <- function(vec) {
count <- 0
for (i in vec) {
if (is.na(i) == TRUE) {
count <- count + 1
}
}
return(count)
}
summary_stats <- function(vec) {
list(minimum = get_minimum(vec),
percent10 = get_percentile10(vec),
quartile1 = get_quartile1(vec),
median = get_median(vec),
mean = get_average(vec),
quartile3 = get_quartile3(vec),
percent90 = get_percentile90(vec),
maximum = get_maximum(vec),
range = get_range(vec),
stdev = get_stdev(vec),
missing = count_missing(vec))
}
a
summary_stats(a)
a
a <- c(1,3,4)
summary_stats(a)
get_minimum(a)
get_maximum(a)
a <- c(1,3,4, NA, 11)
get_maximum(a)
get_percentile10(a)
get_quartile1(a)
get_quartile3(a)
a <- c(1, 4, 7, NA, 1)
a <- c(1, 4, 7, NA, 10)
get_quartile3(a)
get_average(a)
get_minimum(a)
get_percentile10(a)
get_quartile1(a)
get_median(a)
get_average(a)
get_average <- function(vec, na.rm = NULL) {
#Returns the average of the inputted vector. If na.rm is TRUE,   NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
sum <- 0
length <- 0
for (num in vec) {
if (!is.na(num)){
sum <- sum + num
length <- length + 1
}
}
return(sum / length)
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
sum <- 0
for (num in vec) {
sum <- sum + num
}
return(sum / length(vec))
}
}
a <- c(1, 4, 7, NA, 10)
get_average(a)
get_quartile3(a)
get_percentile90(a)
get_range(a)
get_stdev(a)
count_missing(a)
get_stdev(a)
get_stdev <- function(vec, na.rm = NULL) {
#Returns the standard deviation of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
vec <- remove_missing(vec)
avg <- get_average(vec)
devs <- 0
for (num in vec) {
devs <- devs + (num - avg)**2
}
return(sqrt(((1 / (length(vec) - 1)) * devs)))
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
avg <- get_average(vec)
devs <- 0
for (num in vec) {
devs <- devs + (num - avg)**2
}
return(sqrt(((1 / (length(vec) - 1)) * devs)))
}
}
get_stdev(a)
a <- c(1, 4, 7, NA, 10)
summary_stats(a)
library('stringr')
stats <- summary_stats(c(1,3))
stats
stats <- summary_stats(a)
stats
rbind(
(str_c(str_pad(names(stats)[1], side = c('right'), width = 10), ':', str_pad(format(stats[1], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[2], side = c('right'), width = 10), ':', str_pad(format(stats[2], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[3], side = c('right'), width = 10), ':', str_pad(format(stats[3], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[4], side = c('right'), width = 10), ':', str_pad(format(stats[4], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[5], side = c('right'), width = 10), ':', str_pad(format(stats[5], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[6], side = c('right'), width = 10), ':', str_pad(format(stats[6], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[7], side = c('right'), width = 10), ':', str_pad(format(stats[7], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[8], side = c('right'), width = 10), ':', str_pad(format(stats[8], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[9], side = c('right'), width = 10), ':', str_pad(format(stats[9], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[10], side = c('right'), width = 10), ':', str_pad(sprintf("%1.4f", stats[10]),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[11], side = c('right'), width = 10), ':', str_pad(format(stats[11], nsmall = 4),
side = c('left'), width = 8)))
)
a <- c(1, 4, 7, NA, 10, 'test')
summary_stats(a)
a <- c(1, 4, 7, NA, 10)
summary_stats(a)
library('stringr')
stats <- summary_stats(a)
stats
rbind(
(str_c(str_pad(names(stats)[1], side = c('right'), width = 10), ':', str_pad(format(stats[1], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[2], side = c('right'), width = 10), ':', str_pad(format(stats[2], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[3], side = c('right'), width = 10), ':', str_pad(format(stats[3], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[4], side = c('right'), width = 10), ':', str_pad(format(stats[4], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[5], side = c('right'), width = 10), ':', str_pad(format(stats[5], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[6], side = c('right'), width = 10), ':', str_pad(format(stats[6], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[7], side = c('right'), width = 10), ':', str_pad(format(stats[7], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[8], side = c('right'), width = 10), ':', str_pad(format(stats[8], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[9], side = c('right'), width = 10), ':', str_pad(format(stats[9], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[10], side = c('right'), width = 10), ':', str_pad(sprintf("%1.4f", stats[10]),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[11], side = c('right'), width = 10), ':', str_pad(format(stats[11], nsmall = 4),
side = c('left'), width = 8)))
)
print_stats <- function(stats) {
return(
rbind(
(str_c(str_pad(names(stats)[1], side = c('right'), width = 10), ':', str_pad(format(stats[1], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[2], side = c('right'), width = 10), ':', str_pad(format(stats[2], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[3], side = c('right'), width = 10), ':', str_pad(format(stats[3], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[4], side = c('right'), width = 10), ':', str_pad(format(stats[4], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[5], side = c('right'), width = 10), ':', str_pad(format(stats[5], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[6], side = c('right'), width = 10), ':', str_pad(format(stats[6], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[7], side = c('right'), width = 10), ':', str_pad(format(stats[7], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[8], side = c('right'), width = 10), ':', str_pad(format(stats[8], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[9], side = c('right'), width = 10), ':', str_pad(format(stats[9], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[10], side = c('right'), width = 10), ':', str_pad(sprintf("%1.4f", stats[10]),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[11], side = c('right'), width = 10), ':', str_pad(format(stats[11], nsmall = 4),
side = c('left'), width = 8)))
)
)
}
print_stats <- function(stats) {
return(
rbind(
(str_c(str_pad(names(stats)[1], side = c('right'), width = 10), ':', str_pad(format(stats[1], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[2], side = c('right'), width = 10), ':', str_pad(format(stats[2], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[3], side = c('right'), width = 10), ':', str_pad(format(stats[3], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[4], side = c('right'), width = 10), ':', str_pad(format(stats[4], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[5], side = c('right'), width = 10), ':', str_pad(format(stats[5], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[6], side = c('right'), width = 10), ':', str_pad(format(stats[6], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[7], side = c('right'), width = 10), ':', str_pad(format(stats[7], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[8], side = c('right'), width = 10), ':', str_pad(format(stats[8], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[9], side = c('right'), width = 10), ':', str_pad(format(stats[9], nsmall = 4),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[10], side = c('right'), width = 10), ':', str_pad(sprintf("%1.4f", stats[10]),
side = c('left'), width = 8))),
(str_c(str_pad(names(stats)[11], side = c('right'), width = 10), ':', str_pad(format(stats[11], nsmall = 4),
side = c('left'), width = 8)))
)
)
}
print_stats(stats)
rescale100 <- function(x, xmin, xmax) {
return(
100 * ((x -xmin) / (xmax - xmin))
)
}
b <- c(18,15,16,4,17,9)
rescale100(b)
rescale100(b, 0, 20)
drop_lowest <- function(vec) {
sorted <- sort(vec)
return(sorted[-1])
}
source('~/Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
b <- c(10,10,8.5,4,7,9)
drop_lowest(b)
help("sort")
drop <- sort(vec)[-1]
drop_lowest <- function(vec) {
drop <- sort(vec)[-1]
return(sort(drop, decreasing = TRUE))
}
help("sort")
b <- c(10,10,8.5,4,7,9)
drop_lowest(b)
score_homework <- function(vec, drop = NULL) {
if (is.null(drop)) {
return(get_average(vec))
}
else if (drop == TRUE) {
drop <- drop_lowest(vec)
return (get_average(drop))
}
}
hws <- c(100 , 80, 30, 70, 75, 85)
score_homework(hws)
score_homework(hws, TRUE)
score_quiz <- function(vec, drop = NULL) {
if (is.null(drop)) {
return(get_average(vec))
}
else if (drop == TRUE) {
drop <- drop_lowest(vec)
return (get_average(drop))
}
}
quizzes <- c(100, 80, 70, 0)
score_quiz(quizzes)
score_quiz(quizzes, TRUE)
score_lab <- function(attendance) {
if (attendance > 12 | attendance < 0) {
stop('The attendance value is out of the range 0-12.')
}
else if (attendance == 11 | attendance ==12) {
return(100)
}
else if (attendance == 10) {
return(80)
}
else if (attendance == 9) {
return(60)
}
else if (attendance == 8) {
return(40)
}
else if (attendance == 7) {
return(20)
}
else if (attendance < 6) {
return(0)
}
}
score_lab(13)
score_lab(12)
score_lab(8)
install.packages('testthat')
install.packages('testthat')
install.packages('testthat')
library('testthat')
getwd()
getsd()
getwd()
getwd()
getwd()
source('/functions.R')
library(shiny); runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
&  !is.na(i)
for (i in vec) {
if (is.numeric(i) == FALSE &  !is.na(i)) {
stop('The input contains a non-numeric value.')
}
}
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/app/gradevis.R')
