non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (is.numeric(vec) == TRUE) {
stop('The vector contians a non-numeric value.')
}
else {
vec <- vec
}
}
source('functions.R')
is.numeric(raw$HW1)
non_numeric(raw$hw2)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (vec == FALSE) {
stop('The vector contians a non-numeric value.')
}
else {
vec <- vec
}
}
non_numeric(raw$hw2)
is.numeric(raw$HW2)
summary_stats(raw$hw1)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (is.numeric(vec) == FALSE) {
stop('The vector contians a non-numeric value.')
}
else {
vec <- vec
}
}
typeof(raw$HW2)
is.numeric(raw$HW1)
summary_stats(raw$hw1)
non_numeric(raw$hw2)
raw$HW2
typeof(raw$HW2)
str(raw$HW2)
apply(raw$HW1, function(x) is.numeric(x))
apply(raw, 2 function(x) is.numeric(x))
apply(raw, 2,function(x) is.numeric(x))
sapply(raw, 2,function(x) is.numeric(x))
sapply(raw, function(x) is.numeric(x))
sapply(raw$HW3, function(x) is.numeric(x))
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (sapply(vec, function(x) is.numeric(x)) == FALSE) {
stop('The vector contians a non-numeric value.')
}
else {
vec <- vec
}
}
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (sapply(vec, function(x) is.numeric(x)) == FALSE) {
stop('The vector contians a non-numeric value.')
}
else {
vec <- vec
}
}
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (sapply(vec, function(x) is.numeric(x)) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
is.numeric(raw$HW2)
str(raw$HW2)
non_numeric(raw$hw2)
sapply(raw$HW2, function(x) is.numeric(x))
typeof(raw$HW2)
summary_stats(raw$hw1)
non_numeric(raw$hw2)
sapply(raw$HW2, function(x) is.numeric(x))
non_numeric(raw$hw2)
blah <- raw$HW2
sapply(blah, function(x) is.numeric(x))
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (sapply(vec, function(x) is.numeric(x)) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
non_numeric(raw$hw2)
get_minimum(a)
a <- c(1,3,4,NA)
get_minimum(a)
rep(FALSE, 10)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (sapply(vec, function(x) is.numeric(x)) == rep(FALSE, length(vec))) {
stop('The vector contians a non-numeric value.')
}
}
non_numeric(raw$hw2)
blah <- raw$HW2
sapply(vec, function(x) is.numeric(x))
sapply(blah, function(x) is.numeric(x))
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (!sapply(vec, function(x) is.numeric(x))) {
stop('The vector contians a non-numeric value.')
}
}
sapply(blah, function(x) is.numeric(x))
non_numeric(raw$hw2)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
if (is.numeric(vec) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
get_minimum(a)
summary_stats(raw$hw1)
blah <- raw$HW2
is.numeric(blah)
summary_stats(raw$hw1)
summary_stats(raw$hw1)
print(vec)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
print(vec)
if (is.numeric(vec) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
summary_stats(raw$hw1)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
print(vec)
if (is.numeric(vec) == FALSE) {
stop('The vector contians a non-numeric value.')
}
}
source('functions.R')
summary_stats(raw$hw1)
non_numeric(raw$hw2)
non_numeric(raw$hw2)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
print(vec)
if (is.numeric(vec) == FALSE) {
stop('The input contains a non-numeric value.')
}
}
non_numeric(raw$hw2)
print(vec[1])
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
print(vec[1])
if (is.numeric(vec) == FALSE) {
stop('The input contains a non-numeric value.')
}
}
summary_stats(raw$hw1)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
for (i in vec) {
if (is.numeric(i) == FALSE) {
stop('The input contains a non-numeric value.')
}
}
}
non_numeric(raw$hw2)
non_numeric(raw$hw2)
blah <- raw$HW2
is.numeric(blah)
get_minimum(a)
summary_stats(raw$hw1)
summary_stats(raw$hw1)
raw$HW1[3]
raw$HW1[3]
is.numeric(raw$HW1[3])
is.numeric(NA)
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
for (i in vec) {
if (is.numeric(i) == FALSE &  i != NA) {
stop('The input contains a non-numeric value.')
}
}
}
non_numeric <- function(vec) {
#Helper function to halt non-numeric vector inputs in functions.
for (i in vec) {
if (is.numeric(i) == FALSE &  !is.na(i)) {
stop('The input contains a non-numeric value.')
}
}
}
summary_stats(raw$hw1)
non_numeric(raw$hw2)
summary_stats(raw$hw1)
get_minimum <- function(vec, na.rm = NULL) {
#Returns the minimum of the inputted vector. If na.rm is TRUE, NA values ommitted.
vec <- remove_missing(vec)
non_numeric(vec)
if (is.null(na.rm)) {
vec <- remove_missing(vec)
return(sort(vec)[1])
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(sort(vec)[1])
}
}
non_numeric(raw$hw2)
summary_stats(raw$hw1)
source('functions.R')
summary_stats(raw$hw1)
get_minimum(raw$hw2)
get_minimum <- function(vec, na.rm = NULL) {
#Returns the minimum of the inputted vector. If na.rm is TRUE, NA values ommitted.
non_numeric(vec)
if (is.null(na.rm)) {
vec <- remove_missing(vec)
return(sort(vec)[1])
}
else if (na.rm == TRUE) {
vec <- remove_missing(vec)
return(sort(vec)[1])
}
}
is.numeric(raw$HW1[3])
get_minimum(raw$hw2)
min(raw$hw2)
summary_stats(raw$hw1)
raw$hw2
raw$hw2
raw$hw2
raw <- read.csv('../data/rawdata/rawscores.csv', header = TRUE)
raw$hw2
raw$hw2
View(raw)
raw$HW1
raw$hw2
raw$hw1
raw$HW1
get_minimum(raw$hw2)
get_minimum(raw$HW1)
setwd("~/Desktop/Junior Fall/Stat 133/stat133-hws-fall17/hw04/code")
raw <- read.csv('../data/rawdata/rawscores.csv', header = TRUE)
source('../code/functions.R')
raw <- read.csv('../data/rawdata/rawscores.csv', header = TRUE)
raw$HW1
summary_stats(raw$HW1)
print_stats(raw$HW1)
print_stats(raw$HW2)
range(raw$HW2)
range(remove_missing(raw$HW2))
get_minimum(raw$HW1)
get_minimum(raw$HW2)
print_stats(raw$HW2)
get_average(raw$HW2)
print_stats(raw$HW2)
stats <- summary_stats(raw$HW2)
stats
print_stats(stats)
print_stats(raw$HW2)
summary_stats(raw$HW1)
summary_stats(raw$HW2)
print_stats(raw$HW2)
stats[1]
print_stats <- function(stats){
cat('minimum  :', format(stats[1], nsmall = 4), '\n')
cat('percent10:', format(unlist(stats[2]), nsmall = 4), '\n')
cat('quartile1:', format(unlist(stats[3]), nsmall = 4), '\n')
cat('median   :', format(unlist(stats[4]), nsmall = 4), '\n')
cat('mean     :', format(unlist(stats[5]), nsmall = 4), '\n')
cat('quartile3:', format(unlist(stats[6]), nsmall = 4), '\n')
cat('percent90:', format(unlist(stats[7]), nsmall = 4), '\n')
cat('maximum  :', format(unlist(stats[8]), nsmall = 4), '\n')
cat('range    :', format(unlist(stats[9]), nsmall = 4), '\n')
cat('stdev    :', sprintf('%1.4f', unlist(stats[10])), '\n')
cat('missing  :', format(unlist(stats[11]), nsmall = 4), '\n')
}
print_stats(raw$HW2)
print_stats <- function(stats){
stats <- summary_stats(stats)
cat('minimum  :', format(unlist(stats[1]), nsmall = 4), '\n')
cat('percent10:', format(unlist(stats[2]), nsmall = 4), '\n')
cat('quartile1:', format(unlist(stats[3]), nsmall = 4), '\n')
cat('median   :', format(unlist(stats[4]), nsmall = 4), '\n')
cat('mean     :', format(unlist(stats[5]), nsmall = 4), '\n')
cat('quartile3:', format(unlist(stats[6]), nsmall = 4), '\n')
cat('percent90:', format(unlist(stats[7]), nsmall = 4), '\n')
cat('maximum  :', format(unlist(stats[8]), nsmall = 4), '\n')
cat('range    :', format(unlist(stats[9]), nsmall = 4), '\n')
cat('stdev    :', sprintf('%1.4f', unlist(stats[10])), '\n')
cat('missing  :', format(unlist(stats[11]), nsmall = 4), '\n')
}
print_stats(raw$HW2)
summary_stats(c(2,3,4,'ca'))
sink('../output/summary_rawscores.txt')
str(raw)
for col in names(raw) {
return(summary_stats(col)
}
for col in names(raw) {
return(print_stats(col))
}
sink()
sink()
sink('../output/summary-rawscores.txt')
str(raw)
for (col in names(raw)) {
return(summary_stats(col))
}
sink()
summary_stats(raw$HW6)
summary_stats(raw$HW1)
summary_stats(raw$HW2)
summary_stats(raw$HW3)
summary_stats(raw$HW4)
summary_stats(raw$HW5)
summary_stats(raw$HW6
)
summary_stats(raw$HW7
)
summary_stats(raw$HW8
)
summary_stats(raw$HW9
)
names(raw)
summary_stats(raw$ATT
)
summary_stats(raw$QZ1
)
summary_stats(raw$QZ2
)
summary_stats(raw$QZ3
)
summary_stats(raw$QZ4
)
summary_stats(raw$EX1
)
summary_stats(raw$EX2
)
for (col in names(raw)) {
return(summary_stats(col))
}
names(raw)
sink('../output/summary-rawscores.txt')
str(raw)
summary_stats(raw$HW1)
summary_stats(raw$HW2)
summary_stats(raw$HW3)
summary_stats(raw$HW4)
summary_stats(raw$HW5)
summary_stats(raw$HW6)
summary_stats(raw$HW7)
summary_stats(raw$HW8)
summary_stats(raw$HW9)
summary_stats(raw$ATT)
summary_stats(raw$QZ1)
summary_stats(raw$QZ2)
summary_stats(raw$QZ3)
summary_stats(raw$QZ4)
summary_stats(raw$EX1)
summary_stats(raw$EX2)
sink()
sink('../output/summary-rawscores.txt')
str(raw)
summary_stats(raw$HW1)
print_stats(raw$HW1)
summary_stats(raw$HW2)
print_stats(raw$HW2)
summary_stats(raw$HW3)
print_stats(raw$HW3)
summary_stats(raw$HW4)
print_stats(raw$HW4)
summary_stats(raw$HW5)
print_stats(raw$HW5)
summary_stats(raw$HW6)
print_stats(raw$HW6)
summary_stats(raw$HW7)
print_stats(raw$HW7)
summary_stats(raw$HW8)
print_stats(raw$HW8)
summary_stats(raw$HW9)
print_stats(raw$HW9)
summary_stats(raw$ATT)
print_stats(raw$ATT)
summary_stats(raw$QZ1)
print_stats(raw$QZ1)
summary_stats(raw$QZ2)
print_stats(raw$QZ2)
summary_stats(raw$QZ3)
print_stats(raw$QZ13)
summary_stats(raw$QZ4)
print_stats(raw$QZ4)
summary_stats(raw$EX1)
print_stats(raw$EX1)
summary_stats(raw$EX2)
print_stats(raw$EX2)
sink()
sink('../output/summary-rawscores.txt')
str(raw)
summary_stats(raw$HW1)
print_stats(raw$HW1)
summary_stats(raw$HW2)
print_stats(raw$HW2)
summary_stats(raw$HW3)
print_stats(raw$HW3)
summary_stats(raw$HW4)
print_stats(raw$HW4)
summary_stats(raw$HW5)
print_stats(raw$HW5)
summary_stats(raw$HW6)
print_stats(raw$HW6)
summary_stats(raw$HW7)
print_stats(raw$HW7)
summary_stats(raw$HW8)
print_stats(raw$HW8)
summary_stats(raw$HW9)
print_stats(raw$HW9)
summary_stats(raw$ATT)
print_stats(raw$ATT)
summary_stats(raw$QZ1)
print_stats(raw$QZ1)
summary_stats(raw$QZ2)
print_stats(raw$QZ2)
summary_stats(raw$QZ3)
print_stats(raw$QZ3)
summary_stats(raw$QZ4)
print_stats(raw$QZ4)
summary_stats(raw$EX1)
print_stats(raw$EX1)
summary_stats(raw$EX2)
print_stats(raw$EX2)
sink()
raw[hw2]
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
i <- 0
}
}
}
raw
raw
View(raw)
raw$HW2[5]
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
val <- 0
}
}
}
raw$HW2[5]
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
raw$col[val] <- 0
}
}
}
raw$HW2[5]
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
print(val)
}
}
}
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
raw$col[val] <- 0
}
}
}
raw$HW2[5]
replace_na(raw)
replace_na <- function(df) {
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
raw$col[val] <- 0
}
}
}
}
replace_na(raw)
raw
replace_na <- function(df) {
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
return(val)
}
}
}
}
replace_na(raw)
replace_na(raw)
replace_na <- function(df) {
for (col in names(raw)) {
for (val in raw$col) {
if (is.na(val)) {
return(val)
}
}
}
}
replace_na(raw)
raw
